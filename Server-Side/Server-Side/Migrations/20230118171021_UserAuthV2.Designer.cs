// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server_Side.Model;

#nullable disable

namespace ServerSide.Migrations
{
    [DbContext(typeof(OrderDbContext))]
    [Migration("20230118171021_UserAuthV2")]
    partial class UserAuthV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Server_Side.Model.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedByUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("Username");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = new Guid("d2d075ce-a029-426c-b1ef-4503fd30debb"),
                            CreatedByUsername = "admin",
                            CreatedDate = new DateTime(2023, 1, 18, 12, 10, 21, 486, DateTimeKind.Local).AddTicks(4211),
                            CustomerName = "Kroger",
                            Type = 0
                        },
                        new
                        {
                            OrderId = new Guid("7531937e-b8bb-4bb9-8fa8-f19361d18029"),
                            CreatedByUsername = "user",
                            CreatedDate = new DateTime(2023, 1, 18, 12, 10, 21, 486, DateTimeKind.Local).AddTicks(4240),
                            CustomerName = "Taget",
                            Type = 1
                        },
                        new
                        {
                            OrderId = new Guid("24caea9f-4e64-4e7f-a654-6eb1af5ecea5"),
                            CreatedByUsername = "admin3",
                            CreatedDate = new DateTime(2023, 1, 18, 12, 10, 21, 486, DateTimeKind.Local).AddTicks(4243),
                            CustomerName = "Apple",
                            Type = 2
                        },
                        new
                        {
                            OrderId = new Guid("647d7f9c-6765-4248-b574-bb2865a69a9f"),
                            CreatedByUsername = "admin4",
                            CreatedDate = new DateTime(2023, 1, 18, 12, 10, 21, 486, DateTimeKind.Local).AddTicks(4246),
                            CustomerName = "Microsoft",
                            Type = 3
                        },
                        new
                        {
                            OrderId = new Guid("c9415dd9-ef5a-4bad-a8a6-28d26932a957"),
                            CreatedByUsername = "admin5",
                            CreatedDate = new DateTime(2023, 1, 18, 12, 10, 21, 486, DateTimeKind.Local).AddTicks(4248),
                            CustomerName = "Google",
                            Type = 4
                        });
                });

            modelBuilder.Entity("Server_Side.Model.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "admin",
                            FirstName = "Bryan",
                            LastName = "Rodriguez",
                            PasswordHash = "admin",
                            PermissionLevel = 3,
                            PhoneNumber = "8126972996"
                        },
                        new
                        {
                            Username = "user",
                            FirstName = "Bryan",
                            LastName = "Rodriguez",
                            PasswordHash = "admin",
                            PermissionLevel = 1,
                            PhoneNumber = "8126972996"
                        },
                        new
                        {
                            Username = "admin3",
                            FirstName = "Bryan",
                            LastName = "Rodriguez",
                            PasswordHash = "admin",
                            PermissionLevel = 3,
                            PhoneNumber = "8126972996"
                        },
                        new
                        {
                            Username = "admin4",
                            FirstName = "Bryan",
                            LastName = "Rodriguez",
                            PasswordHash = "admin",
                            PermissionLevel = 3,
                            PhoneNumber = "8126972996"
                        },
                        new
                        {
                            Username = "admin5",
                            FirstName = "Bryan",
                            LastName = "Rodriguez",
                            PasswordHash = "admin",
                            PermissionLevel = 3,
                            PhoneNumber = "8126972996"
                        });
                });

            modelBuilder.Entity("Server_Side.Model.Order", b =>
                {
                    b.HasOne("Server_Side.Model.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("Username");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server_Side.Model.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
